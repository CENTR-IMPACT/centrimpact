% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/analyze_cascade.R
\name{analyze_cascade}
\alias{analyze_cascade}
\title{Analyze Network Cascade Structure}
\usage{
analyze_cascade(network_df)
}
\arguments{
\item{network_df}{A data frame containing the network edges with the following structure:
\itemize{
\item \code{from}: Source node identifier (character or numeric). Must be non-missing.
\item \code{to}: Target node identifier (character or numeric). Must be non-missing.
\item \code{layer}: Layer identifier (positive integer, typically 1-3). Layer 1 represents
the core/permanent layer, with higher numbers indicating more peripheral layers.
}
The data frame must contain at least one row, and all columns must be non-NULL.
Self-loops (where from == to) are automatically removed during processing.}
}
\value{
A list object of class "cascade_analysis" containing the following components:
\describe{
\item{\code{cascade_df}}{A data frame with one row per network layer containing:
\itemize{
\item{\code{layer} (integer): Layer identifier (1 = core, 2 = intermediate, 3 = peripheral)}
\item{\code{layer_number} (character): Formatted layer label with degree symbol (e.g., "1st degree", "2nd degree")}
\item{\code{count} (integer): Number of unique nodes in the layer}
\item{\code{gamma} (numeric, 0-1): Layer-specific decay factor (higher = more influence retention)}
\item{\code{layer_knitting} (numeric, 0-1): Mean knitting score for the layer}
\item{\code{layer_bridging} (numeric, 0-1): Mean bridging score for the layer}
\item{\code{layer_channeling} (numeric, 0-1): Mean channeling score for the layer}
\item{\code{layer_reaching} (numeric, 0-1): Mean reaching score for the layer}
\item{\code{layer_score} (numeric, 0-1): Composite influence score for the layer}
\item{\code{mu} (numeric, 0.75-1.0): Proportional multiplier for layer size adjustment}
\item{\code{raw_count_for_this_degree} (integer): Unadjusted node count before multiplier}
}
}
\item{\code{cascade_score}}{A numeric value between 0 and 1 representing the Gini-like coefficient of influence concentration across layers.
Values closer to 1 indicate highly concentrated influence in few layers, while values near 0 suggest more uniform distribution.}
}
}
\description{
Performs a comprehensive analysis of network cascade structure by calculating various
network metrics and influence measures across different network layers. This function
implements a multi-layer network analysis approach based on Leng et al.'s framework,
providing quantitative measures of influence propagation through network structures.

The function computes four key influence measures that capture different aspects of
network influence dynamics:
\itemize{
\item \strong{Knitting} (0-1): Measures the node's ability to bind community members together,
with higher values indicating stronger community cohesion influence.
\item \strong{Bridging} (0-1): Quantifies the node's capacity to connect different communities,
with higher values indicating better inter-community connectivity.
\item \strong{Channeling} (0-1): Assesses the node's control over information flow,
with higher values indicating greater control over network pathways.
\item \strong{Reaching} (0-1): Measures the node's ability to access and influence
distant network parts, with higher values indicating better reach.
}
}
\details{
The analysis implements a structured multi-layer network analysis pipeline with the following stages:
\enumerate{
\item \strong{Network Construction}:
\itemize{
\item Converts input edge list to an undirected igraph object
\item Validates node-layer assignments and handles missing data
\item Removes self-loops and ensures edge uniqueness
}
\item \strong{Topology Metrics} (Global Network Properties):
\itemize{
\item \code{topology_efficiency}: Global efficiency of the network
\item \code{topology_connectedness}: Network wide connectedness measure
\item \code{topology_hierarchy}: Degree of hierarchical organization
\item \code{topology_lubness}: Network cohesion and integration
}
\item \strong{Local Metrics} (Node-level Analysis):
\itemize{
\item Community centrality (\code{local_community})
\item Cross-clique centrality (\code{local_crossclique})
\item Local clustering coefficient (\code{local_clustcoef})
}
\item \strong{Global Metrics} (Network-wide Centrality):
\itemize{
\item Eigenvector centrality (\code{global_eigenv})
\item Betweenness centrality (\code{global_betweenness})
\item Alpha centrality (\code{global_alpha})
\item Harmonic centrality (\code{global_harmonic})
}
\item \strong{Influence Measures}:
\itemize{
\item Combines local and global metrics using the formula: I = gamma * (alpha\emph{L + beta}G) + lambda*T
\item Normalizes scores to [0,1] range for comparability
\item Ranks nodes within each influence dimension
}
\item \strong{Layer Aggregation}:
\itemize{
\item Applies layer-specific decay factors (gamma)
\item Adjusts for layer size effects using proportional multipliers (\eqn{\mu})
\item Computes layer-wise averages for each influence measure
}
\item \strong{Cascade Scoring}:
\itemize{
\item Computes Gini coefficient to quantify influence concentration
\item Generates visualization-ready mathematical expression
}
}
}
\section{Validation and Error Handling}{

The function includes several validation checks:
\itemize{
\item Verifies required columns exist in input data
\item Handles missing values in layer assignments
\item Removes duplicate edges and self-loops
\item Validates layer assignments are positive integers
\item Imputes missing values where appropriate
\item Provides informative error messages for common issues
}

The layer decay factors are applied as follows:
\itemize{
\item Layer 1: 0.9 (highest influence)
\item Layer 2: 0.5 (moderate influence)
\item Layer 3: 0.45 (lower influence)
\item Other layers: 0 (minimal influence)
}
}

\section{Mathematical Framework}{

The influence measures are calculated using the formula:
I = \eqn{gamma * (alpha * L + beta * G) + lambda * T}
where:
\itemize{
\item \code{I} = Influence measure
\item \code{gamma} = Layer decay factor
\item \code{alpha} = Local metric weight (0.4)
\item \code{L} = Local centrality measure
\item \code{beta} = Global metric weight (0.3)
\item \code{G} = Global centrality measure
\item \code{lambda} = Topology weight (0.3)
\item \code{T} = Topology score
}
}

\section{Dependencies}{

This function requires the following packages:
\itemize{
\item \code{igraph}: For graph construction and basic centrality measures
\item \code{dplyr}: For data manipulation and aggregation
\item \code{tibble}: For modern data frame operations
\item \code{centiserve}: For specialized centrality measures
\item \code{sna}: For social network analysis metrics
\item \code{glue}: For string formatting (via layer_number creation)
}
}

\section{Helper Functions}{

This function assumes the following helper functions are available:
\itemize{
\item \code{normalize()}: Scales values to [0,1] range
\item \code{calculate_proportional_multiplier()}: Computes layer-size adjustment factors
\item \code{calculate_gini()}: Computes Gini coefficient for concentration measurement
}
}

\section{Computational Complexity}{

The computational complexity of this function is primarily determined by:
\itemize{
\item Network construction: O(m) where m is the number of edges
\item Global metrics: O(n(m + n log n)) for betweenness and other global measures
\item Local metrics: O(m^2/n) for community detection in sparse graphs
\item Layer aggregation: O(n) where n is the number of nodes
}
For large networks (n > 10,000 nodes), consider using sampling or approximation methods
for centrality measures to improve performance.
}

\examples{
\dontrun{
# Example 1: Basic usage with synthetic data
# Create a sample network with three layers
set.seed(123)
network_data <- data.frame(
  from = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J",
          "A", "B", "C", "K", "L", "M", "N", "O", "P", "Q"),
  to = c("B", "C", "D", "E", "F", "G", "H", "I", "J", "A",
        "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T"),
  layer = c(rep(1, 10), rep(2, 10))
)

# Analyze cascade structure
result <- analyze_cascade(network_data)

# View cascade score (0-1, higher = more concentrated influence)
cat("Cascade Score (Gini coefficient):", result$cascade_score, "\n")

# View detailed layer metrics
print("Cascade metrics by layer:")
print(result$cascade_df)

# Example 3: Working with real-world data
# Load required packages
if (require(igraphdata) && require(tidygraph)) {
  # Use Zachary's karate club network as an example
  data("karate", package = "igraphdata")

  # Convert to edge list and assign layers (for demonstration)
  edge_df <- as_data_frame(karate, what = "edges")
  edge_df$layer <- sample(1:3, nrow(edge_df), replace = TRUE, prob = c(0.6, 0.3, 0.1))

  # Analyze cascade structure
  karate_result <- analyze_cascade(edge_df)

  # Compare layer influence profiles
  print(karate_result$cascade_df \%>\%
          select(layer_number, knitting:reaching))
}
}

}
\references{
\itemize{
\item Leng, Y., Zhai, Y., Sun, S., Wu, Y., Selzer, J., & Ester, M. (2018).
A multi-layered network model for studying the cascade of influence in organizations.
\emph{Network Science}, 6(3), 306-329. \doi{10.1017/nws.2018.3}

\item Newman, M. E. J. (2018).
Networks (2nd ed.). Oxford University Press.
\doi{10.1093/oso/9780198805090.001.0001}

\item Borgatti, S. P., & Everett, M. G. (2006).
A Graph-theoretic perspective on centrality.
\emph{Social Networks}, 28(4), 466-484.
\doi{10.1016/j.socnet.2005.11.005}

\item Csardi, G., & Nepusz, T. (2006).
The igraph software package for complex network research.
\emph{InterJournal, Complex Systems}, 1695(5), 1-9.
URL: https://igraph.org
}
}
\author{
Your Name, Your Institution
Maintainer: Your Name \href{mailto:your.email@example.com}{your.email@example.com}
}
